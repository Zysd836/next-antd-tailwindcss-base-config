"""Autogenerated input type of AcceptFaqAnswerMutation"""
input AcceptFaqAnswerMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of AcceptFaqAnswerMutation"""
type AcceptFaqAnswerMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  faqAnswer: FaqAnswer!
}

enum AcceptedTypeEnum {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  TEST_CASE
}

interface ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

type Authorization {
  accessToken: String!
  user: User!
}

input CalculateJobQuizPointInput {
  optionIds: [ID!]!
}

"""Autogenerated input type of CalculateJobQuizPointMutation"""
input CalculateJobQuizPointMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CalculateJobQuizPointInput!
}

"""Autogenerated return type of CalculateJobQuizPointMutation"""
type CalculateJobQuizPointMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  result: JSON!
}

type CategoriesSearchResult {
  node: [Category!]!
  pageInfo: Result!
}

type Category implements ActiveRecordInterface {
  ancestors: [Category!]
  ancestry: String
  children: [Category!]
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  parent: Category
  slug: String
  thumbnail: PublicFile
  updatedAt: ISO8601DateTime!
}

input CategoryInput {
  description: String
  name: String!
  parentId: ID
  slug: String
  thumbnailId: ID
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""Autogenerated input type of ChangePasswordMutation"""
input ChangePasswordMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: ChangePasswordInput!
}

"""Autogenerated return type of ChangePasswordMutation"""
type ChangePasswordMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

type CodeSuggestion implements ActiveRecordInterface {
  content: String!

  """Phần trăm điểm bị trừ"""
  cost: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  language: Language
  languageId: Int
  topicSectionId: Int!
  updatedAt: ISO8601DateTime!
}

type CodeSuggestionRequest implements ActiveRecordInterface {
  codeSuggestionId: ID!

  """Nội dung gợi ý"""
  content: String!

  """Phần trăm điểm bị trừ"""
  cost: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

input CodeSuggestionRequestInput {
  codeSuggestionId: ID!
}

type CodingExam implements SectionItemInterface {
  createdAt: ISO8601DateTime!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum
  id: ID!

  """Đã hoàn thành"""
  isCompleted: Boolean!
  limit: CodingExamLimit!

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  slug: String
  tagList: [String!]
  testCases: [CodingExamTestCase!]!
  testCasesFile: PublicFile!
  title: String!
  topicSection(programId: ID!): TopicSection
  updatedAt: ISO8601DateTime!
}

type CodingExamLimit {
  memoryLimit: Int
  sourceLimit: Int
  timeLimit: Int
}

input CodingExamLimitInput {
  memoryLimit: Int
  sourceLimit: Int
  timeLimit: Int
}

type CodingExamSubmission implements ExamSubmissionInterface {
  caseResults: JSON
  correctRatio: Float
  createdAt: ISO8601DateTime!
  error: CodingExamSubmissionError
  id: ID!
  isJudged: Boolean!
  language: Language!
  owner: User!
  src: String!
  stat: ExamSubmissionStat
  totalPoints: Float
  updatedAt: ISO8601DateTime!
}

type CodingExamSubmissionError {
  message: String
  type: SubmissionErrorTypeEnum
}

input CodingExamSubmissionInput {
  codingExamId: ID!
  languageId: ID!
  programId: ID!
  src: String!
}

type CodingExamTestCase {
  input: String!
  output: String!
}

type CodingExamsSearchResult {
  node: [CodingExam!]!
  pageInfo: Result!
}

type Comment implements ActiveRecordInterface {
  children: [Comment!]!
  content: String
  contentHtml: String
  createdAt: ISO8601DateTime!
  id: ID!
  ownedVote: Vote
  updatedAt: ISO8601DateTime!
  user: User!
  votes: [Vote!]!
  votesSum: Int
}

enum CommentableTypeEnum {
  PROGRAM
  POST
}

"""Autogenerated input type of ConfirmEmailMutation"""
input ConfirmEmailMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String!
}

"""Autogenerated return type of ConfirmEmailMutation"""
type ConfirmEmailMutationPayload {
  accessToken: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: String

  """:ok or :error"""
  status: String
}

type Course implements ActiveRecordInterface {
  categories: [Category!]!
  comments: [Comment!]!
  cover: PublicFile
  createdAt: ISO8601DateTime!
  description: String
  difficulty: DifficultyEnum
  duration: Int
  examsCount: Int!
  haveCertificate: Boolean!
  id: ID!
  isDraft: Boolean
  isFavorite: Boolean
  isFeatured: Boolean

  """Check xem user hiện tại đã join vào program này chưa"""
  isJoined: Boolean
  isTrending: Boolean
  languages: [Language!]!
  lessonsCount: Int
  meta: JSON

  """Phần trăm tiến độ"""
  ownedProgress: Float
  owner: User!
  programsUsersCount: Int!
  readingTopicSection: TopicSection
  slug: String
  tagList: [String!]
  title: String
  topics: [Topic!]
  totalPoints: Int!
  updatedAt: ISO8601DateTime!
  viewsCount: Int!
}

type CourseCertificatesSearchResult {
  node: [UserCertificate!]!
  pageInfo: Result!
}

type CourseLesson implements SectionItemInterface {
  content: String!
  createdAt: ISO8601DateTime!

  """Độ khó"""
  difficulty: DifficultyEnum
  duration: Int
  featureImage: PublicFile
  id: ID!
  isDraft: Boolean

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  slug: String
  tagList: [String!]
  title: String!
  updatedAt: ISO8601DateTime!
  video: PublicFile
}

input CourseLessonInput {
  content: String!

  """Thời lượng bài học (phút)"""
  duration: Int
  featureImageId: ID
  isDraft: Boolean
  slug: String
  title: String!
  videoId: ID
}

type CourseLessonsSearchResult {
  node: [CourseLesson!]!
  pageInfo: Result!
}

type CoursesSearchResult {
  node: [Course!]!
  pageInfo: Result!
}

input CreateAttachmentInput {
  """Id of uploaded file"""
  id: String!

  """Metadata"""
  metadata: JSON!

  """Storage: cache or store"""
  storage: StorageTypeEnum!
}

"""Autogenerated input type of CreateCategoryMutation"""
input CreateCategoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CategoryInput!
}

"""Autogenerated return type of CreateCategoryMutation"""
type CreateCategoryMutationPayload {
  category: Category!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

input CreateCodeSuggestionInput {
  content: String!

  """Phần trăm điểm bị trừ"""
  cost: Int!
  languageId: Int
}

"""Autogenerated input type of CreateCodeSuggestionRequestMutation"""
input CreateCodeSuggestionRequestMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CodeSuggestionRequestInput!
}

"""Autogenerated return type of CreateCodeSuggestionRequestMutation"""
type CreateCodeSuggestionRequestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  codeSuggestionRequest: CodeSuggestionRequest!
}

input CreateCodingExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  limit: CodingExamLimitInput

  """Id của file test case (PublicFile id)"""
  testCasesFileId: ID!
}

"""Autogenerated input type of CreateCodingExamMutation"""
input CreateCodingExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateCodingExamInput!
}

"""Autogenerated return type of CreateCodingExamMutation"""
type CreateCodingExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  codingExam: CodingExam!
}

"""Autogenerated input type of CreateCodingExamSubmissionMutation"""
input CreateCodingExamSubmissionMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CodingExamSubmissionInput!
}

"""Autogenerated return type of CreateCodingExamSubmissionMutation"""
type CreateCodingExamSubmissionMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  codingExamSubmission: CodingExamSubmission!
}

input CreateCommentInput {
  content: String!
  contentHtml: String!
  commentableId: ID!
  commentableType: CommentableTypeEnum!
  parentId: ID
}

"""Autogenerated input type of CreateCommentMutation"""
input CreateCommentMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateCommentInput!
}

"""Autogenerated return type of CreateCommentMutation"""
type CreateCommentMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  comment: Comment!
}

input CreateCourseInput {
  """Ảnh khóa học"""
  coverId: ID

  """Mô tả khóa học"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES
  isDraft: Boolean = false

  """Đánh dấu khóa học nổi bật"""
  isFeatured: Boolean = false

  """Đánh dấu khóa học thịnh hành"""
  isTrending: Boolean = false

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Tiêu đề khóa học"""
  title: String!
  categoryIds: [ID!]!

  """Thời lượng khóa học (giờ)"""
  duration: Int
  haveCertificate: Boolean

  """Topics của khóa học"""
  topicsAttributes: [CreateTopicInput!]

  """Ngôn ngữ"""
  languageIds: [ID!]
}

"""Autogenerated input type of CreateCourseLessonMutation"""
input CreateCourseLessonMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CourseLessonInput!
}

"""Autogenerated return type of CreateCourseLessonMutation"""
type CreateCourseLessonMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  courseLesson: CourseLesson!
}

"""Autogenerated input type of CreateCourseMutation"""
input CreateCourseMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateCourseInput!
}

"""Autogenerated return type of CreateCourseMutation"""
type CreateCourseMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  course: Course!
}

"""Autogenerated input type of CreateDirectoryMutation"""
input CreateDirectoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: DirectoryInput!
}

"""Autogenerated return type of CreateDirectoryMutation"""
type CreateDirectoryMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  directory: Directory!
}

"""Autogenerated input type of CreateEducationMutation"""
input CreateEducationMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: EducationInput!
}

"""Autogenerated return type of CreateEducationMutation"""
type CreateEducationMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  education: Education!
}

"""Autogenerated input type of CreateFaqAnswerMutation"""
input CreateFaqAnswerMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: FaqAnswerInput!
}

"""Autogenerated return type of CreateFaqAnswerMutation"""
type CreateFaqAnswerMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  faqAnswer: FaqAnswer!
}

"""Autogenerated input type of CreateFaqMutation"""
input CreateFaqMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: FaqInput!
}

"""Autogenerated return type of CreateFaqMutation"""
type CreateFaqMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  faq: Faq!
}

"""Autogenerated input type of CreateFavoriteCourseMutation"""
input CreateFavoriteCourseMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: FavoriteCourseInput!
}

"""Autogenerated return type of CreateFavoriteCourseMutation"""
type CreateFavoriteCourseMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  favoriteCourse: FavoriteCourse!
}

input CreateGapFillExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  content: String!
  gapValues: [String!]!
  isIgnoreCase: Boolean = true
}

"""Autogenerated input type of CreateGapFillExamMutation"""
input CreateGapFillExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateGapFillExamInput!
}

"""Autogenerated return type of CreateGapFillExamMutation"""
type CreateGapFillExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gapFillExam: GapFillExam!
}

"""Autogenerated input type of CreateGapFillExamSubmissionMutation"""
input CreateGapFillExamSubmissionMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: GapFillExamSubmissionInput!
}

"""Autogenerated return type of CreateGapFillExamSubmissionMutation"""
type CreateGapFillExamSubmissionMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gapFillExamSubmission: GapFillExamSubmission!
}

input CreateJobQuizOptionInput {
  """Content"""
  content: String!
  personalityIds: [ID!]!
  rowOrderPosition: Int!
}

input CreateLearningPathInput {
  """Lợi ích sau khi học khóa học"""
  benefits: JSON!

  """Học đầy đủ khóa học mang lại"""
  benefitsSummary: JSON!

  """Ảnh"""
  coverId: ID

  """Mô tả"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Thời lượng"""
  duration: Int!

  """Khóa học bao gồm"""
  includes: String!

  """Meta"""
  meta: JSON

  """Các dự án bạn sẽ xây dựng"""
  projects: JSON!
  slug: String

  """Tổng quan"""
  summary: String!

  """Danh sách tag"""
  tagList: [String!]

  """Khóa học dành cho """
  target: String!

  """Tiêu đề"""
  title: String!
  learningPathsProgramsAttributes: [CreateLearningPathsProgramInput!]!
}

"""Autogenerated input type of CreateLearningPathMutation"""
input CreateLearningPathMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateLearningPathInput!
}

"""Autogenerated return type of CreateLearningPathMutation"""
type CreateLearningPathMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  learningPath: LearningPath!
}

input CreateLearningPathsProgramInput {
  programId: ID!
  rowOrderPosition: Int!
}

input CreateOrganizedExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  allowList: [String!]!
  canRunCode: Boolean = true
  content: String!
  denyList: [String!]!
}

"""Autogenerated input type of CreateOrganizedExamMutation"""
input CreateOrganizedExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateOrganizedExamInput!
}

"""Autogenerated return type of CreateOrganizedExamMutation"""
type CreateOrganizedExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizedExam: OrganizedExam!
}

"""Autogenerated input type of CreateOrganizedExamSubmissionMutation"""
input CreateOrganizedExamSubmissionMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: OrganizedExamSubmissionInput!
}

"""Autogenerated return type of CreateOrganizedExamSubmissionMutation"""
type CreateOrganizedExamSubmissionMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizedExamSubmission: OrganizedExamSubmission!
}

input CreatePostInput {
  categoryIds: [ID!]!

  """Nội dung bài viết"""
  content: String!

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Ảnh xem trước của bài viết"""
  thumbnailId: ID

  """Tiêu đề bài viết"""
  title: String!

  """bài viết liên quan"""
  relatedBridgesAttributes: [CreateRelatedBridgeInput!]
}

"""Autogenerated input type of CreatePostMutation"""
input CreatePostMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreatePostInput!
}

"""Autogenerated return type of CreatePostMutation"""
type CreatePostMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  post: Post!
}

input CreatePracticeInput {
  """Ảnh khóa học"""
  coverId: ID

  """Mô tả khóa học"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES
  isDraft: Boolean = false

  """Đánh dấu khóa học nổi bật"""
  isFeatured: Boolean = false

  """Đánh dấu khóa học thịnh hành"""
  isTrending: Boolean = false

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Tiêu đề khóa học"""
  title: String!
  categoryIds: [ID!]!

  """Thời lượng khóa học (giờ)"""
  duration: Int
  haveCertificate: Boolean

  """Topics của khóa học"""
  topicsAttributes: [CreateTopicInput!]

  """Ngôn ngữ"""
  languageIds: [ID!]
}

"""Autogenerated input type of CreatePracticeMutation"""
input CreatePracticeMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreatePracticeInput!
}

"""Autogenerated return type of CreatePracticeMutation"""
type CreatePracticeMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  practice: Practice!
}

input CreatePublicFileInput {
  """Attachment"""
  attachment: CreateAttachmentInput!

  """Directory Id"""
  directoryId: ID!
}

"""Autogenerated input type of CreatePublicFileMutation"""
input CreatePublicFileMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreatePublicFileInput!
}

"""Autogenerated return type of CreatePublicFileMutation"""
type CreatePublicFileMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  publicFile: PublicFile!
}

input CreateQuizExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  quizQuestBridgesAttributes: [CreateQuizQuestBridgeInput!]
}

"""Autogenerated input type of CreateQuizExamMutation"""
input CreateQuizExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateQuizExamInput!
}

"""Autogenerated return type of CreateQuizExamMutation"""
type CreateQuizExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  quizExam: QuizExam!
}

"""Autogenerated input type of CreateQuizExamSubmissionMutation"""
input CreateQuizExamSubmissionMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: QuizExamSubmissionInput!
}

"""Autogenerated return type of CreateQuizExamSubmissionMutation"""
type CreateQuizExamSubmissionMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  quizExamSubmission: QuizExamSubmission!
}

input CreateQuizQuestBridgeInput {
  quizQuestId: ID!
  rowOrderPosition: Int!
}

"""Autogenerated input type of CreateQuizQuestMutation"""
input CreateQuizQuestMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: QuizQuestInput!
}

"""Autogenerated return type of CreateQuizQuestMutation"""
type CreateQuizQuestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  quizQuest: QuizQuest!
}

input CreateRelatedBridgeInput {
  rowOrderPosition: Int!
  toId: ID!
  toType: RelatedBridgeTypeEnum!
}

input CreateSampleCodeInput {
  code: String!
  languageId: Int!
}

input CreateTopicInput {
  isDraft: Boolean

  """Tên topic"""
  name: String!

  """Thứ tự của topic"""
  rowOrderPosition: Int!

  """Tổng quan topic"""
  summary: String

  """Danh sách section của topics"""
  topicSectionsAttributes: [CreateTopicSectionInput!]
}

input CreateTopicSectionInput {
  rowOrderPosition: Int!
  sectionItemId: ID!
  codeSuggestionsAttributes: [CreateCodeSuggestionInput!]
  sampleCodesAttributes: [CreateSampleCodeInput!]
}

"""Autogenerated input type of CreateUserMutation"""
input CreateUserMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: UserInput!
}

"""Autogenerated return type of CreateUserMutation"""
type CreateUserMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

input CreateVoteInput {
  id: ID!
  voteType: VoteTypeEnum!
}

"""Autogenerated input type of CreateWorkExperienceMutation"""
input CreateWorkExperienceMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: WorkExperienceInput!
}

"""Autogenerated return type of CreateWorkExperienceMutation"""
type CreateWorkExperienceMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workExperience: WorkExperience!
}

enum DegreeClassificationEnum {
  NOT_GRADUATED
  ORDINARY
  GOOD
  VERY_GOOD
  EXCELLENT
}

"""Autogenerated input type of DeleteCategoriesMutation"""
input DeleteCategoriesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteCategoriesMutation"""
type DeleteCategoriesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteCategoryMutation"""
input DeleteCategoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of DeleteCategoryMutation"""
type DeleteCategoryMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

"""Autogenerated input type of DeleteCodingExamsMutation"""
input DeleteCodingExamsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteCodingExamsMutation"""
type DeleteCodingExamsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteCommentsMutation"""
input DeleteCommentsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteCommentsMutation"""
type DeleteCommentsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteCourseLessonsMutation"""
input DeleteCourseLessonsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteCourseLessonsMutation"""
type DeleteCourseLessonsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteCourseMutation"""
input DeleteCourseMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of DeleteCourseMutation"""
type DeleteCourseMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

"""Autogenerated input type of DeleteCoursesMutation"""
input DeleteCoursesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteCoursesMutation"""
type DeleteCoursesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteDirectoriesMutation"""
input DeleteDirectoriesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteDirectoriesMutation"""
type DeleteDirectoriesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteDirectoryMutation"""
input DeleteDirectoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of DeleteDirectoryMutation"""
type DeleteDirectoryMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

"""Autogenerated input type of DeleteEducationsMutation"""
input DeleteEducationsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteEducationsMutation"""
type DeleteEducationsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteFaqAnswersMutation"""
input DeleteFaqAnswersMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteFaqAnswersMutation"""
type DeleteFaqAnswersMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteFaqsMutation"""
input DeleteFaqsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteFaqsMutation"""
type DeleteFaqsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteGapFillExamsMutation"""
input DeleteGapFillExamsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteGapFillExamsMutation"""
type DeleteGapFillExamsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteLearningPathsMutation"""
input DeleteLearningPathsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteLearningPathsMutation"""
type DeleteLearningPathsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteOrganizedExamsMutation"""
input DeleteOrganizedExamsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteOrganizedExamsMutation"""
type DeleteOrganizedExamsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeletePostMutation"""
input DeletePostMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of DeletePostMutation"""
type DeletePostMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String!
}

"""Autogenerated input type of DeletePostsMutation"""
input DeletePostsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeletePostsMutation"""
type DeletePostsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeletePracticesMutation"""
input DeletePracticesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeletePracticesMutation"""
type DeletePracticesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeletePublicFileMutation"""
input DeletePublicFileMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of DeletePublicFileMutation"""
type DeletePublicFileMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

"""Autogenerated input type of DeletePublicFilesMutation"""
input DeletePublicFilesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeletePublicFilesMutation"""
type DeletePublicFilesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteQuizExamsMutation"""
input DeleteQuizExamsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteQuizExamsMutation"""
type DeleteQuizExamsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteQuizQuestsMutation"""
input DeleteQuizQuestsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteQuizQuestsMutation"""
type DeleteQuizQuestsMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteUsersMutation"""
input DeleteUsersMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteUsersMutation"""
type DeleteUsersMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteWorkExperiencesMutation"""
input DeleteWorkExperiencesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ids: [ID!]!
}

"""Autogenerated return type of DeleteWorkExperiencesMutation"""
type DeleteWorkExperiencesMutationPayload {
  affectedIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

enum DifficultyEnum {
  ALL_SCOPES
  BEGINNER
  INTERMEDIATE
  EXPERT
}

type Directory implements ActiveRecordInterface {
  ancestry: String
  children: [Directory!]
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  owner: User!
  publicFiles(
    acceptedTypes: [AcceptedTypeEnum!]

    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): PublicFilesResolversSearchResult
  updatedAt: ISO8601DateTime!
}

input DirectoryInput {
  """Name"""
  name: String!

  """Parent Id"""
  parentId: ID!
}

type Education implements ActiveRecordInterface {
  concentration: String
  createdAt: ISO8601DateTime!
  degreeClassification: DegreeClassificationEnum
  description: String
  endDate: ISO8601DateTime
  id: ID!
  school: String!
  startDate: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

input EducationInput {
  concentration: String
  degreeClassification: DegreeClassificationEnum
  description: String
  endDate: ISO8601DateTime
  school: String!
  startDate: ISO8601DateTime
}

interface ExamSubmissionInterface {
  correctRatio: Float
  createdAt: ISO8601DateTime!
  id: ID!
  owner: User!
  stat: ExamSubmissionStat
  totalPoints: Float
  updatedAt: ISO8601DateTime!
}

type ExamSubmissionStat {
  correctCount: Int!
  totalCount: Int!
}

"""Exam Submission Union"""
union ExamSubmissionUnion = CodingExamSubmission | GapFillExamSubmission

type Faq implements ActiveRecordInterface {
  answers(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): FaqAnswersResolversSearchResult!
  content: String
  contentHtml: String
  createdAt: ISO8601DateTime!
  faqAnswersCount: Int!
  id: ID!
  isAnswered: Boolean!
  isBounty: Boolean!
  isSolved: Boolean!
  latestAnsweredAt: ISO8601DateTime

  """vote mà bạn đã cho"""
  ownedVote: Vote
  owner: User!
  slug: String
  tagList: [String!]
  title: String
  updatedAt: ISO8601DateTime!
  votes: [Vote!]!
  votesSum: Int
}

type FaqAnswer implements ActiveRecordInterface {
  children(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): FaqAnswerChildrenSearchResult!
  content: String
  contentHtml: String
  createdAt: ISO8601DateTime!
  faqId: Int
  id: ID!
  isAccepted: Boolean!
  ownedVote: Vote
  owner: User!
  updatedAt: ISO8601DateTime!
  votes: [Vote!]!
  votesSum: Int
}

type FaqAnswerChildrenSearchResult {
  node: [FaqAnswer!]!
  pageInfo: Result!
}

input FaqAnswerInput {
  content: String!
  contentHtml: String!
  faqId: Int!
  parentId: ID
}

type FaqAnswersResolversSearchResult {
  node: [FaqAnswer!]!
  pageInfo: Result!
}

input FaqInput {
  content: String!
  contentHtml: String!
  isBounty: Boolean
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!
}

type FaqsSearchResult {
  node: [Faq!]!
  pageInfo: Result!
}

type FavoriteCourse implements ActiveRecordInterface {
  course: Course!
  courseId: ID!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  userId: ID!
}

input FavoriteCourseInput {
  courseId: ID!
}

type GapFillExam implements SectionItemInterface {
  content: String!
  createdAt: ISO8601DateTime!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum
  gapValues: [String!]!
  id: ID!

  """Đã hoàn thành"""
  isCompleted: Boolean!
  isIgnoreCase: Boolean!

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  slug: String
  tagList: [String!]
  title: String!
  topicSection(programId: ID!): TopicSection
  updatedAt: ISO8601DateTime!
}

type GapFillExamJudgedResult {
  index: Int!
  isCorrect: Boolean!
}

type GapFillExamSubmission implements ExamSubmissionInterface {
  correctRatio: Float
  createdAt: ISO8601DateTime!
  filledValues: [String!]
  id: ID!
  judgedResult: [GapFillExamJudgedResult!]
  owner: User!
  stat: ExamSubmissionStat
  totalPoints: Float
  updatedAt: ISO8601DateTime!
}

input GapFillExamSubmissionInput {
  filledValues: [String!]!
  gapFillExamId: ID!
  programId: ID!
}

type GapFillExamsSearchResult {
  node: [GapFillExam!]!
  pageInfo: Result!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

input JdoodleExecuteInput {
  language: String!
  script: String!
  stdin: String
  versionIndex: String!
}

"""Autogenerated input type of JdoodleExecuteMutation"""
input JdoodleExecuteMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: JdoodleExecuteInput!
}

"""Autogenerated return type of JdoodleExecuteMutation"""
type JdoodleExecuteMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  response: JdoodleExecuteResponse!
}

type JdoodleExecuteResponse {
  body: JSON!
  status: Int!
}

type JobQuizOption implements ActiveRecordInterface {
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  personalityIds: [ID!]!
  rowOrder: Int!
  updatedAt: ISO8601DateTime!
}

type JobQuizQuestion implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  jobQuizOptions: [JobQuizOption!]!
  nextQuestion: JobQuizQuestion
  rowOrder: Int!
  title: String
  updatedAt: ISO8601DateTime!
}

input JobQuizQuestionInput {
  """Danh sách options của question"""
  jobQuizOptionsAttributes: [CreateJobQuizOptionInput!]
  rowOrderPosition: Int!

  """Title"""
  title: String!
}

type JobQuizQuestionsSearchResult {
  node: [JobQuizQuestion!]!
  pageInfo: Result!
}

"""Autogenerated input type of JoinLearningPathMutation"""
input JoinLearningPathMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  learningPathId: ID!
}

"""Autogenerated return type of JoinLearningPathMutation"""
type JoinLearningPathMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

"""Autogenerated input type of JoinProgramMutation"""
input JoinProgramMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: ProgramsUserInput!
}

"""Autogenerated return type of JoinProgramMutation"""
type JoinProgramMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  programsUser: ProgramsUser!
}

type Language implements ActiveRecordInterface {
  canJudge: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  reactAceKey: String
  updatedAt: ISO8601DateTime!
}

type LearningPath implements ActiveRecordInterface {
  benefits: JSON
  benefitsSummary: JSON
  cover: PublicFile
  coverId: Int
  createdAt: ISO8601DateTime!
  description: String
  difficulty: DifficultyEnum!
  duration: Int
  id: ID!
  includes: String
  isJoined: Boolean!
  learningPathsPrograms: [LearningPathsProgram!]!
  meta: JSON

  """Phần trăm tiến độ"""
  ownedProgress: Float
  owner: User!
  ownerId: Int
  projects: JSON
  reading: LearningPathReading
  slug: String!
  summary: String
  tagList: [String!]
  target: String
  title: String!
  updatedAt: ISO8601DateTime!
}

type LearningPathReading {
  courseSlug: String!
  sectionItemSlug: String!
}

type LearningPathSuggestion implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  learningPath: LearningPath!
  rowOrder: Int
  updatedAt: ISO8601DateTime!
}

input LearningPathSuggestionInput {
  learningPathId: ID!
  rowOrderPosition: Int!

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

type LearningPathsProgram implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  program: Course!
  rowOrder: Int
  updatedAt: ISO8601DateTime!
}

type LearningPathsSearchResult {
  node: [LearningPath!]!
  pageInfo: Result!
}

"""Autogenerated input type of LeaveProgramMutation"""
input LeaveProgramMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: ProgramsUserInput!
}

"""Autogenerated return type of LeaveProgramMutation"""
type LeaveProgramMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String!
}

input LoginInput {
  """Email"""
  email: String!

  """Password"""
  password: String!
}

"""Autogenerated input type of LoginMutation"""
input LoginMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: LoginInput!
}

"""Autogenerated return type of LoginMutation"""
type LoginMutationPayload {
  authorization: Authorization!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

type Mutation {
  acceptFaqAnswer(
    """Parameters for AcceptFaqAnswerMutation"""
    input: AcceptFaqAnswerMutationInput!
  ): AcceptFaqAnswerMutationPayload
  calculateJobQuizPoint(
    """Parameters for CalculateJobQuizPointMutation"""
    input: CalculateJobQuizPointMutationInput!
  ): CalculateJobQuizPointMutationPayload
  changePassword(
    """Parameters for ChangePasswordMutation"""
    input: ChangePasswordMutationInput!
  ): ChangePasswordMutationPayload
  confirmEmail(
    """Parameters for ConfirmEmailMutation"""
    input: ConfirmEmailMutationInput!
  ): ConfirmEmailMutationPayload
  createCategory(
    """Parameters for CreateCategoryMutation"""
    input: CreateCategoryMutationInput!
  ): CreateCategoryMutationPayload
  createCodeSuggestionRequest(
    """Parameters for CreateCodeSuggestionRequestMutation"""
    input: CreateCodeSuggestionRequestMutationInput!
  ): CreateCodeSuggestionRequestMutationPayload
  createCodingExam(
    """Parameters for CreateCodingExamMutation"""
    input: CreateCodingExamMutationInput!
  ): CreateCodingExamMutationPayload
  createCodingExamSubmission(
    """Parameters for CreateCodingExamSubmissionMutation"""
    input: CreateCodingExamSubmissionMutationInput!
  ): CreateCodingExamSubmissionMutationPayload
  createComment(
    """Parameters for CreateCommentMutation"""
    input: CreateCommentMutationInput!
  ): CreateCommentMutationPayload
  createCourse(
    """Parameters for CreateCourseMutation"""
    input: CreateCourseMutationInput!
  ): CreateCourseMutationPayload
  createCourseLesson(
    """Parameters for CreateCourseLessonMutation"""
    input: CreateCourseLessonMutationInput!
  ): CreateCourseLessonMutationPayload
  createDirectory(
    """Parameters for CreateDirectoryMutation"""
    input: CreateDirectoryMutationInput!
  ): CreateDirectoryMutationPayload
  createEducation(
    """Parameters for CreateEducationMutation"""
    input: CreateEducationMutationInput!
  ): CreateEducationMutationPayload
  createFaq(
    """Parameters for CreateFaqMutation"""
    input: CreateFaqMutationInput!
  ): CreateFaqMutationPayload
  createFaqAnswer(
    """Parameters for CreateFaqAnswerMutation"""
    input: CreateFaqAnswerMutationInput!
  ): CreateFaqAnswerMutationPayload
  createFavoriteCourse(
    """Parameters for CreateFavoriteCourseMutation"""
    input: CreateFavoriteCourseMutationInput!
  ): CreateFavoriteCourseMutationPayload
  createGapFillExam(
    """Parameters for CreateGapFillExamMutation"""
    input: CreateGapFillExamMutationInput!
  ): CreateGapFillExamMutationPayload
  createGapFillExamSubmission(
    """Parameters for CreateGapFillExamSubmissionMutation"""
    input: CreateGapFillExamSubmissionMutationInput!
  ): CreateGapFillExamSubmissionMutationPayload
  createLearningPath(
    """Parameters for CreateLearningPathMutation"""
    input: CreateLearningPathMutationInput!
  ): CreateLearningPathMutationPayload
  createOrganizedExam(
    """Parameters for CreateOrganizedExamMutation"""
    input: CreateOrganizedExamMutationInput!
  ): CreateOrganizedExamMutationPayload
  createOrganizedExamSubmission(
    """Parameters for CreateOrganizedExamSubmissionMutation"""
    input: CreateOrganizedExamSubmissionMutationInput!
  ): CreateOrganizedExamSubmissionMutationPayload
  createPost(
    """Parameters for CreatePostMutation"""
    input: CreatePostMutationInput!
  ): CreatePostMutationPayload
  createPractice(
    """Parameters for CreatePracticeMutation"""
    input: CreatePracticeMutationInput!
  ): CreatePracticeMutationPayload
  createPublicFile(
    """Parameters for CreatePublicFileMutation"""
    input: CreatePublicFileMutationInput!
  ): CreatePublicFileMutationPayload
  createQuizExam(
    """Parameters for CreateQuizExamMutation"""
    input: CreateQuizExamMutationInput!
  ): CreateQuizExamMutationPayload
  createQuizExamSubmission(
    """Parameters for CreateQuizExamSubmissionMutation"""
    input: CreateQuizExamSubmissionMutationInput!
  ): CreateQuizExamSubmissionMutationPayload
  createQuizQuest(
    """Parameters for CreateQuizQuestMutation"""
    input: CreateQuizQuestMutationInput!
  ): CreateQuizQuestMutationPayload
  createUser(
    """Parameters for CreateUserMutation"""
    input: CreateUserMutationInput!
  ): CreateUserMutationPayload
  createWorkExperience(
    """Parameters for CreateWorkExperienceMutation"""
    input: CreateWorkExperienceMutationInput!
  ): CreateWorkExperienceMutationPayload
  deleteCategories(
    """Parameters for DeleteCategoriesMutation"""
    input: DeleteCategoriesMutationInput!
  ): DeleteCategoriesMutationPayload
  deleteCategory(
    """Parameters for DeleteCategoryMutation"""
    input: DeleteCategoryMutationInput!
  ): DeleteCategoryMutationPayload
  deleteCodingExams(
    """Parameters for DeleteCodingExamsMutation"""
    input: DeleteCodingExamsMutationInput!
  ): DeleteCodingExamsMutationPayload
  deleteComments(
    """Parameters for DeleteCommentsMutation"""
    input: DeleteCommentsMutationInput!
  ): DeleteCommentsMutationPayload
  deleteCourse(
    """Parameters for DeleteCourseMutation"""
    input: DeleteCourseMutationInput!
  ): DeleteCourseMutationPayload
  deleteCourseLessons(
    """Parameters for DeleteCourseLessonsMutation"""
    input: DeleteCourseLessonsMutationInput!
  ): DeleteCourseLessonsMutationPayload
  deleteCourses(
    """Parameters for DeleteCoursesMutation"""
    input: DeleteCoursesMutationInput!
  ): DeleteCoursesMutationPayload
  deleteDirectories(
    """Parameters for DeleteDirectoriesMutation"""
    input: DeleteDirectoriesMutationInput!
  ): DeleteDirectoriesMutationPayload
  deleteDirectory(
    """Parameters for DeleteDirectoryMutation"""
    input: DeleteDirectoryMutationInput!
  ): DeleteDirectoryMutationPayload
  deleteEducations(
    """Parameters for DeleteEducationsMutation"""
    input: DeleteEducationsMutationInput!
  ): DeleteEducationsMutationPayload
  deleteFaqAnswers(
    """Parameters for DeleteFaqAnswersMutation"""
    input: DeleteFaqAnswersMutationInput!
  ): DeleteFaqAnswersMutationPayload
  deleteFaqs(
    """Parameters for DeleteFaqsMutation"""
    input: DeleteFaqsMutationInput!
  ): DeleteFaqsMutationPayload
  deleteGapFillExams(
    """Parameters for DeleteGapFillExamsMutation"""
    input: DeleteGapFillExamsMutationInput!
  ): DeleteGapFillExamsMutationPayload
  deleteLearningPaths(
    """Parameters for DeleteLearningPathsMutation"""
    input: DeleteLearningPathsMutationInput!
  ): DeleteLearningPathsMutationPayload
  deleteOrganizedExams(
    """Parameters for DeleteOrganizedExamsMutation"""
    input: DeleteOrganizedExamsMutationInput!
  ): DeleteOrganizedExamsMutationPayload
  deletePost(
    """Parameters for DeletePostMutation"""
    input: DeletePostMutationInput!
  ): DeletePostMutationPayload
  deletePosts(
    """Parameters for DeletePostsMutation"""
    input: DeletePostsMutationInput!
  ): DeletePostsMutationPayload
  deletePractices(
    """Parameters for DeletePracticesMutation"""
    input: DeletePracticesMutationInput!
  ): DeletePracticesMutationPayload
  deletePublicFile(
    """Parameters for DeletePublicFileMutation"""
    input: DeletePublicFileMutationInput!
  ): DeletePublicFileMutationPayload
  deletePublicFiles(
    """Parameters for DeletePublicFilesMutation"""
    input: DeletePublicFilesMutationInput!
  ): DeletePublicFilesMutationPayload
  deleteQuizExams(
    """Parameters for DeleteQuizExamsMutation"""
    input: DeleteQuizExamsMutationInput!
  ): DeleteQuizExamsMutationPayload
  deleteQuizQuests(
    """Parameters for DeleteQuizQuestsMutation"""
    input: DeleteQuizQuestsMutationInput!
  ): DeleteQuizQuestsMutationPayload
  deleteUsers(
    """Parameters for DeleteUsersMutation"""
    input: DeleteUsersMutationInput!
  ): DeleteUsersMutationPayload
  deleteWorkExperiences(
    """Parameters for DeleteWorkExperiencesMutation"""
    input: DeleteWorkExperiencesMutationInput!
  ): DeleteWorkExperiencesMutationPayload
  jdoodleExecute(
    """Parameters for JdoodleExecuteMutation"""
    input: JdoodleExecuteMutationInput!
  ): JdoodleExecuteMutationPayload
  joinLearningPath(
    """Parameters for JoinLearningPathMutation"""
    input: JoinLearningPathMutationInput!
  ): JoinLearningPathMutationPayload
  joinProgram(
    """Parameters for JoinProgramMutation"""
    input: JoinProgramMutationInput!
  ): JoinProgramMutationPayload
  leaveProgram(
    """Parameters for LeaveProgramMutation"""
    input: LeaveProgramMutationInput!
  ): LeaveProgramMutationPayload
  login(
    """Parameters for LoginMutation"""
    input: LoginMutationInput!
  ): LoginMutationPayload
  removeCoursesFromFavorite(
    """Parameters for RemoveCoursesFromFavoriteMutation"""
    input: RemoveCoursesFromFavoriteMutationInput!
  ): RemoveCoursesFromFavoriteMutationPayload
  resetPassword(
    """Parameters for ResetPasswordMutation"""
    input: ResetPasswordMutationInput!
  ): ResetPasswordMutationPayload
  sendConfirmationEmail(
    """Parameters for SendConfirmationEmailMutation"""
    input: SendConfirmationEmailMutationInput!
  ): SendConfirmationEmailMutationPayload
  sendResetPasswordEmail(
    """Parameters for SendResetPasswordEmailMutation"""
    input: SendResetPasswordEmailMutationInput!
  ): SendResetPasswordEmailMutationPayload
  signUp(
    """Parameters for SignUpMutation"""
    input: SignUpMutationInput!
  ): SignUpMutationPayload
  updateCategory(
    """Parameters for UpdateCategoryMutation"""
    input: UpdateCategoryMutationInput!
  ): UpdateCategoryMutationPayload
  updateCodingExam(
    """Parameters for UpdateCodingExamMutation"""
    input: UpdateCodingExamMutationInput!
  ): UpdateCodingExamMutationPayload
  updateComment(
    """Parameters for UpdateCommentMutation"""
    input: UpdateCommentMutationInput!
  ): UpdateCommentMutationPayload
  updateCourse(
    """Parameters for UpdateCourseMutation"""
    input: UpdateCourseMutationInput!
  ): UpdateCourseMutationPayload
  updateCourseLesson(
    """Parameters for UpdateCourseLessonMutation"""
    input: UpdateCourseLessonMutationInput!
  ): UpdateCourseLessonMutationPayload
  updateDirectory(
    """Parameters for UpdateDirectoryMutation"""
    input: UpdateDirectoryMutationInput!
  ): UpdateDirectoryMutationPayload
  updateEducation(
    """Parameters for UpdateEducationMutation"""
    input: UpdateEducationMutationInput!
  ): UpdateEducationMutationPayload
  updateFaq(
    """Parameters for UpdateFaqMutation"""
    input: UpdateFaqMutationInput!
  ): UpdateFaqMutationPayload
  updateFaqAnswer(
    """Parameters for UpdateFaqAnswerMutation"""
    input: UpdateFaqAnswerMutationInput!
  ): UpdateFaqAnswerMutationPayload
  updateGapFillExam(
    """Parameters for UpdateGapFillExamMutation"""
    input: UpdateGapFillExamMutationInput!
  ): UpdateGapFillExamMutationPayload
  updateJobQuizQuestions(
    """Parameters for UpdateJobQuizQuestionsMutation"""
    input: UpdateJobQuizQuestionsMutationInput!
  ): UpdateJobQuizQuestionsMutationPayload
  updateLearningPath(
    """Parameters for UpdateLearningPathMutation"""
    input: UpdateLearningPathMutationInput!
  ): UpdateLearningPathMutationPayload
  updateOrganizedExam(
    """Parameters for UpdateOrganizedExamMutation"""
    input: UpdateOrganizedExamMutationInput!
  ): UpdateOrganizedExamMutationPayload
  updatePersonality(
    """Parameters for UpdatePersonalityMutation"""
    input: UpdatePersonalityMutationInput!
  ): UpdatePersonalityMutationPayload
  updatePost(
    """Parameters for UpdatePostMutation"""
    input: UpdatePostMutationInput!
  ): UpdatePostMutationPayload
  updatePractice(
    """Parameters for UpdatePracticeMutation"""
    input: UpdatePracticeMutationInput!
  ): UpdatePracticeMutationPayload
  updateProfile(
    """Parameters for UpdateProfileMutation"""
    input: UpdateProfileMutationInput!
  ): UpdateProfileMutationPayload
  updatePublicFile(
    """Parameters for UpdatePublicFileMutation"""
    input: UpdatePublicFileMutationInput!
  ): UpdatePublicFileMutationPayload
  updateQuizExam(
    """Parameters for UpdateQuizExamMutation"""
    input: UpdateQuizExamMutationInput!
  ): UpdateQuizExamMutationPayload
  updateQuizQuest(
    """Parameters for UpdateQuizQuestMutation"""
    input: UpdateQuizQuestMutationInput!
  ): UpdateQuizQuestMutationPayload
  updateUser(
    """Parameters for UpdateUserMutation"""
    input: UpdateUserMutationInput!
  ): UpdateUserMutationPayload
  updateUserRole(
    """Parameters for UpdateUserRoleMutation"""
    input: UpdateUserRoleMutationInput!
  ): UpdateUserRoleMutationPayload
  updateWorkExperience(
    """Parameters for UpdateWorkExperienceMutation"""
    input: UpdateWorkExperienceMutationInput!
  ): UpdateWorkExperienceMutationPayload
  viewTopicSection(
    """Parameters for ViewTopicSectionMutation"""
    input: ViewTopicSectionMutationInput!
  ): ViewTopicSectionMutationPayload
  voteComment(
    """Parameters for VoteCommentMutation"""
    input: VoteCommentMutationInput!
  ): VoteCommentMutationPayload
  voteFaq(
    """Parameters for VoteFaqMutation"""
    input: VoteFaqMutationInput!
  ): VoteFaqMutationPayload
  voteFaqAnswer(
    """Parameters for VoteFaqAnswerMutation"""
    input: VoteFaqAnswerMutationInput!
  ): VoteFaqAnswerMutationPayload
  votePost(
    """Parameters for VotePostMutation"""
    input: VotePostMutationInput!
  ): VotePostMutationPayload
}

type OrganizedExam implements SectionItemInterface {
  allowList: [String!]!
  canRunCode: Boolean!
  content: String!
  createdAt: ISO8601DateTime!
  denyList: [String!]!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum
  id: ID!

  """Đã hoàn thành"""
  isCompleted: Boolean!

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  slug: String
  tagList: [String!]
  title: String!
  topicSection(programId: ID!): TopicSection
  updatedAt: ISO8601DateTime!
}

type OrganizedExamMistake {
  missingKeyword: String
  prohibitKeywords: [String!]!
}

type OrganizedExamSubmission implements ExamSubmissionInterface {
  content: String!
  correctRatio: Float
  createdAt: ISO8601DateTime!
  id: ID!
  mistake: OrganizedExamMistake
  owner: User!
  stat: ExamSubmissionStat
  totalPoints: Float
  updatedAt: ISO8601DateTime!
}

input OrganizedExamSubmissionInput {
  content: String!
  organizedExamId: ID!
  programId: ID!
}

type OrganizedExamsSearchResult {
  node: [OrganizedExam!]!
  pageInfo: Result!
}

type OwnedCertificatesSearchResult {
  node: [UserCertificate!]!
  pageInfo: Result!
}

type OwnedFavoriteCoursesSearchResult {
  node: [FavoriteCourse!]!
  pageInfo: Result!
}

input PaginateInput {
  """Page number"""
  page: Int

  """Number of nodes per page"""
  perPage: Int
}

type PersonalitiesSearchResult {
  node: [Personality!]!
  pageInfo: Result!
}

type Personality implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  image: PublicFile
  imageId: ID
  learningPathSuggestions: [LearningPathSuggestion!]!
  name: String
  updatedAt: ISO8601DateTime!
}

input PersonalityInput {
  description: String
  imageId: ID
  learningPathSuggestionsAttributes: [LearningPathSuggestionInput!]
  name: String
}

type Post implements ActiveRecordInterface {
  categories: [Category!]!
  comments: [Comment!]!
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  meta: JSON
  ownedVote: Vote
  owner: User
  relatedBridges: [RelatedBridge!]!
  slug: String
  tagList: [String!]
  thumbnail: PublicFile
  title: String!
  updatedAt: ISO8601DateTime!
  viewsCount: Int!
  votes: [Vote!]!
  votesSum: Int
}

type PostsSearchResult {
  node: [Post!]!
  pageInfo: Result!
}

type Practice implements ActiveRecordInterface {
  categories: [Category!]!
  comments: [Comment!]!
  cover: PublicFile
  createdAt: ISO8601DateTime!
  description: String
  difficulty: DifficultyEnum
  duration: Int
  examsCount: Int!
  haveCertificate: Boolean!
  id: ID!
  isDraft: Boolean
  isFavorite: Boolean
  isFeatured: Boolean

  """Check xem user hiện tại đã join vào program này chưa"""
  isJoined: Boolean
  isTrending: Boolean
  languages: [Language!]!
  lessonsCount: Int
  meta: JSON

  """Phần trăm tiến độ"""
  ownedProgress: Float
  owner: User!
  programsUsersCount: Int!
  readingTopicSection: TopicSection
  slug: String
  tagList: [String!]
  title: String
  topics: [Topic!]
  totalPoints: Int!
  updatedAt: ISO8601DateTime!
  viewsCount: Int!
}

type PracticeRankListsSearchResult {
  node: [User!]!
  pageInfo: Result!
}

type PracticeStat {
  ownedPoints: Float
  totalPoints: Float
}

type PracticesSearchResult {
  node: [Practice!]!
  pageInfo: Result!
}

type ProgramsUser implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  programId: ID!
  totalPoints: Float!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
}

input ProgramsUserInput {
  programId: ID!
}

type PublicFile implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  directory: Directory!
  directoryId: ID!
  downloadUrl: String!
  filename: String!
  id: ID!
  metadata: JSON!
  owner: User!
  thumbnailUrl: String!
  updatedAt: ISO8601DateTime!
}

type PublicFilesResolversSearchResult {
  node: [PublicFile!]!
  pageInfo: Result!
}

type Query {
  allLanguages: [Language!]!
  categories(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): CategoriesSearchResult!
  codingExam(id: ID!): CodingExam!
  codingExams(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): CodingExamsSearchResult!
  course(id: ID!): Course!
  courseCertificates(
    courseSlug: String!

    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): CourseCertificatesSearchResult!
  courseLesson(id: ID!): CourseLesson!
  courseLessons(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): CourseLessonsSearchResult!
  courses(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): CoursesSearchResult!
  directory(id: ID!): Directory!
  faq(id: ID!): Faq!
  faqAnswer(id: ID!): FaqAnswer!
  faqs(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): FaqsSearchResult!
  firstJobQuizQuestion: JobQuizQuestion!
  gapFillExam(id: ID!): GapFillExam!
  gapFillExams(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): GapFillExamsSearchResult!
  jobQuizQuestion(id: ID!): JobQuizQuestion!
  jobQuizQuestions(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): JobQuizQuestionsSearchResult!
  learningPath(id: ID!): LearningPath!
  learningPaths(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): LearningPathsSearchResult!
  me: User!
  organizedExam(id: ID!): OrganizedExam!
  organizedExams(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): OrganizedExamsSearchResult!
  ownedCertificates(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): OwnedCertificatesSearchResult!
  ownedCourses: [Course!]
  ownedFavoriteCourses(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): OwnedFavoriteCoursesSearchResult!
  ownedPracticeStat: PracticeStat
  personalities(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): PersonalitiesSearchResult!
  personality(id: ID!): Personality!
  post(id: ID!): Post!
  posts(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): PostsSearchResult!
  practice(id: ID!): Practice!
  practiceRankList(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): PracticeRankListsSearchResult!
  practices(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): PracticesSearchResult!
  publicFile(id: ID!): PublicFile!
  quizExam(id: ID!): QuizExam!
  quizExams(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): QuizExamsSearchResult!
  quizQuest(id: ID!): QuizQuest!
  quizQuests(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): QuizQuestsSearchResult!
  rootDirectory: Directory!
  sectionItem(id: ID!): SectionItemUnion!
  sectionItems(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): SectionItemsSearchResult!
  tags(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): TagsSearchResult!
  topicTopicSections(
    topicId: ID!

    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): TopicTopicSectionsSearchResult!
  user(id: ID!): User!
  users(
    """Specific elasticsearch term"""
    search: String

    """Specific fields to query"""
    fields: [JSON!]

    """Specific where query"""
    filter: JSON

    """Specific order"""
    order: JSON
    paginate: PaginateInput
  ): UsersSearchResult!
}

type QuizExam implements SectionItemInterface {
  createdAt: ISO8601DateTime!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum
  id: ID!

  """Đã hoàn thành"""
  isCompleted: Boolean!

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  quizQuestBridges: [QuizQuestBridge!]!
  slug: String
  tagList: [String!]
  title: String!
  updatedAt: ISO8601DateTime!
}

type QuizExamSubmission implements ExamSubmissionInterface {
  correctRatio: Float
  createdAt: ISO8601DateTime!
  id: ID!
  judgedResult: [QuizQuestJudgedResult!]!
  owner: User!
  stat: ExamSubmissionStat
  totalPoints: Float
  updatedAt: ISO8601DateTime!
}

input QuizExamSubmissionInput {
  answer: [QuizQuestAnswerInput!]!
  programId: ID!
  quizExamId: ID!
}

type QuizExamsSearchResult {
  node: [QuizExam!]!
  pageInfo: Result!
}

type QuizQuest implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  isSingleChoice: Boolean!
  name: String
  options: [QuizQuestOption!]
  title: String
  updatedAt: ISO8601DateTime!
}

input QuizQuestAnswerInput {
  checkedOptionIds: [ID!]!
  quizQuestId: ID!
}

type QuizQuestBridge implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  quizQuest: QuizQuest!
  rowOrder: Int
  updatedAt: ISO8601DateTime!
}

input QuizQuestInput {
  description: String
  name: String!
  options: [QuizQuestOptionInput!]!
  title: String!
}

type QuizQuestJudgedResult {
  checkedOptionIds: [ID!]
  isCorrect: Boolean
  quizQuestId: ID!
}

type QuizQuestOption {
  content: String!
  id: ID!
  isChecked: Boolean!
}

input QuizQuestOptionInput {
  content: String!

  """Id of option (prefer uuid v4)"""
  id: ID!
  isChecked: Boolean!
}

type QuizQuestsSearchResult {
  node: [QuizQuest!]!
  pageInfo: Result!
}

type RelatedBridge implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  rowOrder: Int
  to: RelatedBridgeItemUnion!
  toId: ID!
  toType: RelatedBridgeTypeEnum!
  updatedAt: ISO8601DateTime!
}

"""Related Bridge Item Union"""
union RelatedBridgeItemUnion = Post

enum RelatedBridgeTypeEnum {
  POST
}

"""Autogenerated input type of RemoveCoursesFromFavoriteMutation"""
input RemoveCoursesFromFavoriteMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  courseIds: [ID!]!
}

"""Autogenerated return type of RemoveCoursesFromFavoriteMutation"""
type RemoveCoursesFromFavoriteMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: String
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

"""Autogenerated input type of ResetPasswordMutation"""
input ResetPasswordMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: ResetPasswordInput!
}

"""Autogenerated return type of ResetPasswordMutation"""
type ResetPasswordMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: String

  """ok or error"""
  status: String
}

type Result {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  isOutOfRange: Boolean!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

type SampleCode implements ActiveRecordInterface {
  code: String!
  createdAt: ISO8601DateTime!
  id: ID!
  language: Language!
  languageId: Int!
  topicSectionId: Int!
  updatedAt: ISO8601DateTime!
}

interface SectionItemInterface {
  createdAt: ISO8601DateTime!

  """Độ khó"""
  difficulty: DifficultyEnum
  id: ID!

  """Điểm tối đa"""
  maxPoints: Float!
  owner: User
  slug: String
  tagList: [String!]
  title: String!
  updatedAt: ISO8601DateTime!
}

"""Section Item Union"""
union SectionItemUnion = CodingExam | CourseLesson | GapFillExam | OrganizedExam | QuizExam

type SectionItemsSearchResult {
  node: [SectionItemUnion!]!
  pageInfo: Result!
}

"""Autogenerated input type of SendConfirmationEmailMutation"""
input SendConfirmationEmailMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of SendConfirmationEmailMutation"""
type SendConfirmationEmailMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: String

  """:ok or :error"""
  status: String
}

"""Autogenerated input type of SendResetPasswordEmailMutation"""
input SendResetPasswordEmailMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of SendResetPasswordEmailMutation"""
type SendResetPasswordEmailMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """ok or error"""
  status: String
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
  referralCode: String
}

"""Autogenerated input type of SignUpMutation"""
input SignUpMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: SignUpInput!
}

"""Autogenerated return type of SignUpMutation"""
type SignUpMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

enum StorageTypeEnum {
  store
  cache
}

enum SubmissionErrorTypeEnum {
  INIT_SANDBOX_ERROR
  COMPILE_ERROR
}

type Subscription {
  codingExamSubmissionJudged(id: ID!): CodingExamSubmission!

  """Hello Subscription"""
  hello: String
}

type Tag implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  taggingsCount: Int
  updatedAt: ISO8601DateTime!
}

type TagsSearchResult {
  node: [Tag!]!
  pageInfo: Result!
}

type Topic implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  isDraft: Boolean
  name: String
  rowOrder: Int
  summary: String
  topicSections: [TopicSection!]!
  updatedAt: ISO8601DateTime!
}

type TopicSection implements ActiveRecordInterface {
  codeSuggestions: [CodeSuggestion!]!
  createdAt: ISO8601DateTime!
  id: ID!
  ownedCodeSuggestionRequests: [CodeSuggestionRequest!]
  ownedExamSubmissions: [ExamSubmissionUnion!]
  rowOrder: Int
  sampleCodes: [SampleCode!]!
  sectionItem: SectionItemUnion!
  updatedAt: ISO8601DateTime!
}

type TopicSectionView implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  topicSectionId: ID!
  updatedAt: ISO8601DateTime!
  userId: ID!
}

input TopicSectionViewInput {
  courseId: ID!
  sectionItemId: ID!
}

type TopicTopicSectionsSearchResult {
  node: [TopicSection!]!
  pageInfo: Result!
}

"""Autogenerated input type of UpdateCategoryMutation"""
input UpdateCategoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: CategoryInput!
}

"""Autogenerated return type of UpdateCategoryMutation"""
type UpdateCategoryMutationPayload {
  category: Category!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

input UpdateCodeSuggestionInput {
  content: String!

  """Phần trăm điểm bị trừ"""
  cost: Int!
  languageId: Int

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

input UpdateCodingExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  limit: CodingExamLimitInput

  """Id của file test case (PublicFile id)"""
  testCasesFileId: ID!
}

"""Autogenerated input type of UpdateCodingExamMutation"""
input UpdateCodingExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateCodingExamInput!
}

"""Autogenerated return type of UpdateCodingExamMutation"""
type UpdateCodingExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  codingExam: CodingExam!
}

input UpdateCommentInput {
  content: String!
  contentHtml: String!
}

"""Autogenerated input type of UpdateCommentMutation"""
input UpdateCommentMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateCommentInput!
}

"""Autogenerated return type of UpdateCommentMutation"""
type UpdateCommentMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  comment: Comment!
}

input UpdateCourseInput {
  """Ảnh khóa học"""
  coverId: ID

  """Mô tả khóa học"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES
  isDraft: Boolean = false

  """Đánh dấu khóa học nổi bật"""
  isFeatured: Boolean = false

  """Đánh dấu khóa học thịnh hành"""
  isTrending: Boolean = false

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Tiêu đề khóa học"""
  title: String!
  categoryIds: [ID!]!

  """Thời lượng khóa học (giờ)"""
  duration: Int
  haveCertificate: Boolean

  """Topics của khóa học"""
  topicsAttributes: [UpdateTopicInput!]

  """Ngôn ngữ"""
  languageIds: [ID!]
}

"""Autogenerated input type of UpdateCourseLessonMutation"""
input UpdateCourseLessonMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: CourseLessonInput!
}

"""Autogenerated return type of UpdateCourseLessonMutation"""
type UpdateCourseLessonMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  courseLesson: CourseLesson!
}

"""Autogenerated input type of UpdateCourseMutation"""
input UpdateCourseMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateCourseInput!
}

"""Autogenerated return type of UpdateCourseMutation"""
type UpdateCourseMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  course: Course!
}

"""Autogenerated input type of UpdateDirectoryMutation"""
input UpdateDirectoryMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: DirectoryInput!
}

"""Autogenerated return type of UpdateDirectoryMutation"""
type UpdateDirectoryMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  directory: Directory!
}

"""Autogenerated input type of UpdateEducationMutation"""
input UpdateEducationMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: EducationInput!
}

"""Autogenerated return type of UpdateEducationMutation"""
type UpdateEducationMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  education: Education!
}

"""Autogenerated input type of UpdateFaqAnswerMutation"""
input UpdateFaqAnswerMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: FaqAnswerInput!
}

"""Autogenerated return type of UpdateFaqAnswerMutation"""
type UpdateFaqAnswerMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  faqAnswer: FaqAnswer!
}

"""Autogenerated input type of UpdateFaqMutation"""
input UpdateFaqMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: FaqInput!
}

"""Autogenerated return type of UpdateFaqMutation"""
type UpdateFaqMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  faq: Faq!
}

input UpdateGapFillExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  content: String!
  gapValues: [String!]!
  isIgnoreCase: Boolean = true
}

"""Autogenerated input type of UpdateGapFillExamMutation"""
input UpdateGapFillExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateGapFillExamInput!
}

"""Autogenerated return type of UpdateGapFillExamMutation"""
type UpdateGapFillExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gapFillExam: GapFillExam!
}

"""Autogenerated input type of UpdateJobQuizQuestionsMutation"""
input UpdateJobQuizQuestionsMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: [JobQuizQuestionInput!]!
}

"""Autogenerated return type of UpdateJobQuizQuestionsMutation"""
type UpdateJobQuizQuestionsMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  jobQuizQuestions: [JobQuizQuestion!]!
}

input UpdateLearningPathInput {
  """Lợi ích sau khi học khóa học"""
  benefits: JSON!

  """Học đầy đủ khóa học mang lại"""
  benefitsSummary: JSON!

  """Ảnh"""
  coverId: ID

  """Mô tả"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Thời lượng"""
  duration: Int!

  """Khóa học bao gồm"""
  includes: String!

  """Meta"""
  meta: JSON

  """Các dự án bạn sẽ xây dựng"""
  projects: JSON!
  slug: String

  """Tổng quan"""
  summary: String!

  """Danh sách tag"""
  tagList: [String!]

  """Khóa học dành cho """
  target: String!

  """Tiêu đề"""
  title: String!
  learningPathsProgramsAttributes: [UpdateLearningPathsProgramInput!]
}

"""Autogenerated input type of UpdateLearningPathMutation"""
input UpdateLearningPathMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateLearningPathInput!
}

"""Autogenerated return type of UpdateLearningPathMutation"""
type UpdateLearningPathMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  learningPath: LearningPath!
}

input UpdateLearningPathsProgramInput {
  programId: ID!
  rowOrderPosition: Int!

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

input UpdateOrganizedExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  allowList: [String!]!
  canRunCode: Boolean = true
  content: String!
  denyList: [String!]!
}

"""Autogenerated input type of UpdateOrganizedExamMutation"""
input UpdateOrganizedExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateOrganizedExamInput!
}

"""Autogenerated return type of UpdateOrganizedExamMutation"""
type UpdateOrganizedExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizedExam: OrganizedExam!
}

"""Autogenerated input type of UpdatePersonalityMutation"""
input UpdatePersonalityMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: PersonalityInput!
}

"""Autogenerated return type of UpdatePersonalityMutation"""
type UpdatePersonalityMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  personality: Personality!
}

input UpdatePostInput {
  categoryIds: [ID!]!

  """Nội dung bài viết"""
  content: String!

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Ảnh xem trước của bài viết"""
  thumbnailId: ID

  """Tiêu đề bài viết"""
  title: String!

  """bài viết liên quan"""
  relatedBridgesAttributes: [UpdateRelatedBridgeInput!]
}

"""Autogenerated input type of UpdatePostMutation"""
input UpdatePostMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdatePostInput!
}

"""Autogenerated return type of UpdatePostMutation"""
type UpdatePostMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  post: Post!
}

input UpdatePracticeInput {
  """Ảnh khóa học"""
  coverId: ID

  """Mô tả khóa học"""
  description: String!

  """Độ khó của khóa học"""
  difficulty: DifficultyEnum = ALL_SCOPES
  isDraft: Boolean = false

  """Đánh dấu khóa học nổi bật"""
  isFeatured: Boolean = false

  """Đánh dấu khóa học thịnh hành"""
  isTrending: Boolean = false

  """Meta"""
  meta: JSON
  slug: String

  """Danh sách tag"""
  tagList: [String!]

  """Tiêu đề khóa học"""
  title: String!
  categoryIds: [ID!]!

  """Thời lượng khóa học (giờ)"""
  duration: Int
  haveCertificate: Boolean

  """Topics của khóa học"""
  topicsAttributes: [UpdateTopicInput!]

  """Ngôn ngữ"""
  languageIds: [ID!]
}

"""Autogenerated input type of UpdatePracticeMutation"""
input UpdatePracticeMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdatePracticeInput!
}

"""Autogenerated return type of UpdatePracticeMutation"""
type UpdatePracticeMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  practice: Practice!
}

input UpdateProfileInput {
  address: String
  avatarId: ID
  description: String
  facebookUrl: String
  linkedinUrl: String
  name: String
}

"""Autogenerated input type of UpdateProfileMutation"""
input UpdateProfileMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: UpdateProfileInput!
}

"""Autogenerated return type of UpdateProfileMutation"""
type UpdateProfileMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

input UpdatePublicFileInput {
  """Directory Id"""
  directoryId: ID
}

"""Autogenerated input type of UpdatePublicFileMutation"""
input UpdatePublicFileMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdatePublicFileInput!
}

"""Autogenerated return type of UpdatePublicFileMutation"""
type UpdatePublicFileMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  publicFile: PublicFile!
}

input UpdateQuizExamInput {
  slug: String

  """Danh sách tag"""
  tagList: [String!]
  title: String!

  """Mô tả"""
  description: String

  """Độ khó"""
  difficulty: DifficultyEnum = ALL_SCOPES

  """Điểm tối đa"""
  maxPoints: Float!
  quizQuestBridgesAttributes: [UpdateQuizQuestBridgeInput!]
}

"""Autogenerated input type of UpdateQuizExamMutation"""
input UpdateQuizExamMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateQuizExamInput!
}

"""Autogenerated return type of UpdateQuizExamMutation"""
type UpdateQuizExamMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  quizExam: QuizExam!
}

input UpdateQuizQuestBridgeInput {
  quizQuestId: ID!
  rowOrderPosition: Int!

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

"""Autogenerated input type of UpdateQuizQuestMutation"""
input UpdateQuizQuestMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: QuizQuestInput!
}

"""Autogenerated return type of UpdateQuizQuestMutation"""
type UpdateQuizQuestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  quizQuest: QuizQuest!
}

input UpdateRelatedBridgeInput {
  rowOrderPosition: Int!
  toId: ID!
  toType: RelatedBridgeTypeEnum!

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

input UpdateSampleCodeInput {
  code: String!
  languageId: Int!

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

input UpdateTopicInput {
  isDraft: Boolean

  """Tên topic"""
  name: String!

  """Thứ tự của topic"""
  rowOrderPosition: Int!

  """Tổng quan topic"""
  summary: String

  """Danh sách section của topics"""
  topicSectionsAttributes: [UpdateTopicSectionInput!]

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

input UpdateTopicSectionInput {
  rowOrderPosition: Int!
  sectionItemId: ID!
  codeSuggestionsAttributes: [UpdateCodeSuggestionInput!]
  sampleCodesAttributes: [UpdateSampleCodeInput!]

  """Bỏ trống để tạo mới"""
  id: ID

  """Set = true để xóa"""
  willDestroy: Boolean
}

"""Autogenerated input type of UpdateUserMutation"""
input UpdateUserMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UserInput!
}

"""Autogenerated return type of UpdateUserMutation"""
type UpdateUserMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

input UpdateUserRoleInput {
  role: UserRoleEnum!
}

"""Autogenerated input type of UpdateUserRoleMutation"""
input UpdateUserRoleMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: UpdateUserRoleInput!
}

"""Autogenerated return type of UpdateUserRoleMutation"""
type UpdateUserRoleMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

"""Autogenerated input type of UpdateWorkExperienceMutation"""
input UpdateWorkExperienceMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  params: WorkExperienceInput!
}

"""Autogenerated return type of UpdateWorkExperienceMutation"""
type UpdateWorkExperienceMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  workExperience: WorkExperience!
}

type User implements ActiveRecordInterface {
  address: String
  avatar: PublicFile
  createdAt: ISO8601DateTime!
  description: String
  donePracticesCount: Int!
  educations: [Education!]!
  email: String
  facebookUrl: String
  faqVotes: Int!
  gold: Int!
  id: ID!
  linkedinUrl: String
  monthPoints: Float!
  name: String
  practicePoints: Float!
  practiceRank: Int!
  referralCode: String!
  referredUsersCount: Int!
  referrer: User
  role: UserRoleEnum!
  updatedAt: ISO8601DateTime!
  weekPoints: Float!
  workExperiences: [WorkExperience!]!
  yearPoints: Float!
}

type UserCertificate implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  programsUser: ProgramsUser!
  updatedAt: ISO8601DateTime!
}

input UserInput {
  email: String!
  name: String!
  password: String
  role: UserRoleEnum!
}

enum UserRoleEnum {
  USER
  MODERATOR
  EDITOR
  ADMIN
}

type UsersSearchResult {
  node: [User!]!
  pageInfo: Result!
}

"""Autogenerated input type of ViewTopicSectionMutation"""
input ViewTopicSectionMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: TopicSectionViewInput!
}

"""Autogenerated return type of ViewTopicSectionMutation"""
type ViewTopicSectionMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  topicSectionView: TopicSectionView!
}

type Vote {
  count: Int
}

"""Autogenerated input type of VoteCommentMutation"""
input VoteCommentMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateVoteInput!
}

"""Autogenerated return type of VoteCommentMutation"""
type VoteCommentMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  vote: Vote!
}

"""Autogenerated input type of VoteFaqAnswerMutation"""
input VoteFaqAnswerMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateVoteInput!
}

"""Autogenerated return type of VoteFaqAnswerMutation"""
type VoteFaqAnswerMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  vote: Vote!
}

"""Autogenerated input type of VoteFaqMutation"""
input VoteFaqMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateVoteInput!
}

"""Autogenerated return type of VoteFaqMutation"""
type VoteFaqMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  vote: Vote!
}

"""Autogenerated input type of VotePostMutation"""
input VotePostMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  params: CreateVoteInput!
}

"""Autogenerated return type of VotePostMutation"""
type VotePostMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  vote: Vote!
}

enum VoteTypeEnum {
  UP_VOTE
  DOWN_VOTE
}

type WorkExperience implements ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  description: String
  endDate: ISO8601DateTime
  id: ID!
  jobTitle: String!
  startDate: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  workspaceName: String!
}

input WorkExperienceInput {
  description: String
  endDate: ISO8601DateTime
  jobTitle: String!
  startDate: ISO8601DateTime
  workspaceName: String!
}
